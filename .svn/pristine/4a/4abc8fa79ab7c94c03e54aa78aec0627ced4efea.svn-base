# -*- coding: utf-8 -*-
"""
Created on Wed Oct  2 21:04:00 2024

@author: addaio
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def plot_graphs(file_path, file_type, group_num, columns_to_include, 
                x_label, y_label, legend_labels=None, line_thickness=1.5, 
                x_range=None, y_range=None, x_interval=None, y_interval=None, 
                axis_label_size=12, colors=None, plot_average=False, 
                include_std=False):

    # Load data from the specified file
    if file_type == 'csv':
        df = pd.read_csv(file_path)
    elif file_type == 'pkl':
        df = pd.read_pickle(file_path)
    else:
        raise ValueError("Unsupported file type. Use 'csv' or 'pkl'.")

    # Select the columns associated with the specified group number
    if group_num < 0 or group_num >= len(columns_to_include):
        raise ValueError("Invalid group number. Please choose a valid group number.")
    
    selected_columns = columns_to_include[group_num]

    # Set plot style
    sns.set(style="white")
    plt.figure(figsize=(10, 6))

    # Melt the DataFrame for easier plotting with seaborn
    melted_df = df[selected_columns].melt(id_vars=[selected_columns[0]], var_name="", value_name="Value")
    
    # Plotting the average and std (fill between)
    if plot_average:
        sns.lineplot(
            data=melted_df, 
            x=selected_columns[0], 
            y="Value", 
            hue="", 
            ci="sd" if include_std else None,  # Confidence interval (can use 'sd' for standard deviation)
            linewidth=line_thickness,
            palette=colors[:len(selected_columns[1:])]  # Limit colors to number of lines being plotted
        )

    # Set axis labels
    plt.xlabel(x_label, fontsize=axis_label_size)
    plt.ylabel(y_label, fontsize=axis_label_size)

    # Set axis ranges if specified
    if x_range:
        plt.xlim(x_range)
    if y_range:
        plt.ylim(y_range)

    # Set axis intervals if specified
    if x_interval:
        plt.xticks(range(int(x_range[0]), int(x_range[1]) + 1, x_interval))
    if y_interval:
        plt.yticks(range(int(y_range[0]), int(y_range[1]) + 1, y_interval))

   # Add a legend
   # Customize the legend if labels are provided
    if legend_labels:
        handles, _ = plt.gca().get_legend_handles_labels()
        plt.legend(handles, legend_labels, fontsize=axis_label_size - 2, title=None)

    # Show the plot
    plt.grid()
    plt.tight_layout()
    plt.show()

# Example usage
file_path = "batch_run_results.csv"  # or 'batch_run_results.pkl'
file_type = 'csv'  # or 'pkl'
group_num = 0 # Select the group number from columns_to_include
columns_to_include = [
    ["Step", "Evacuated", "Preflood_Non_Evacuation_Measure_Implemented", "Duringflood_Coping_Action_Implemented", "Postflood_Adaptation_Measures_Planned"],
    ["Step", "Stranded", "Injured", "Sheltered", "Hospitalized", "Death"],
    ["Step", "evacuated_SES_1_0_0.3", "evacuated_SES_1_0.7_1"],
    ["Step", "evacuated_SES_2_0_0.3", "evacuated_SES_2_0.7_1"],
    ["Step", "stranded_SES_1_0_0.3", "stranded_SES_1_0.7_1"],
    ["Step", "stranded_SES_2_0_0.3", "stranded_SES_2_0.7_1"],
    ["Step", "injured_SES_1_0_0.3", "injured_SES_1_0.7_1"],
    ["Step", "injured_SES_2_0_0.3", "injured_SES_2_0.7_1"],
    ["Step", "hospitalized_SES_1_0_0.3", "hospitalized_SES_1_0.7_1"],
    ["Step", "hospitalized_SES_2_0_0.3", "hospitalized_SES_2_0.7_1"],
    ["Step", "sheltered_SES_1_0_0.3", "sheltered_SES_1_0.7_1"],
    ["Step", "sheltered_SES_2_0_0.3", "sheltered_SES_2_0.7_1"],
    ["Step", "dead_SES_1_0_0.3", "dead_SES_1_0.7_1"],
    ["Step", "dead_SES_2_0_0.3", "dead_SES_2_0.7_1"],
    ["Step", "Houses_Flooded", "Businesses_Flooded", "Schools_Flooded"],
    ["Step", "Wealth_People", "Wealth_Businesses", "Wealth_Shelter", "Wealth_Healthcare", "Wealth_Government"],
    ["Step", "PMT_preflood_non_evacuation_measure_implemented_SES_1_0_0.3",	"TPB_preflood_non_evacuation_measure_implemented_SES_1_0_0.3", "SCT_preflood_non_evacuation_measure_implemented_SES_1_0_0.3",	"CRT_preflood_non_evacuation_measure_implemented_SES_1_0_0.3"],
    ["Step", "PMT_preflood_non_evacuation_measure_implemented_SES_1_0.7_1", "TPB_preflood_non_evacuation_measure_implemented_SES_1_0.7_1", "SCT_preflood_non_evacuation_measure_implemented_SES_1_0.7_1",	"CRT_preflood_non_evacuation_measure_implemented_SES_1_0.7_1"],
    ["Step", "PMT_preflood_non_evacuation_measure_implemented_SES_2_0_0.3",	"TPB_preflood_non_evacuation_measure_implemented_SES_2_0_0.3", "SCT_preflood_non_evacuation_measure_implemented_SES_2_0_0.3",	"CRT_preflood_non_evacuation_measure_implemented_SES_2_0_0.3"],
    ["Step", "PMT_preflood_non_evacuation_measure_implemented_SES_2_0.7_1", "TPB_preflood_non_evacuation_measure_implemented_SES_2_0.7_1", "SCT_preflood_non_evacuation_measure_implemented_SES_2_0.7_1",	"CRT_preflood_non_evacuation_measure_implemented_SES_2_0.7_1"],
    ["Step", "PMT_evacuation_SES_1_0_0.3", "TPB_evacuation_SES_1_0_0.3", "SCT_evacuation_SES_1_0_0.3",	"CRT_evacuation_SES_1_0_0.3"],
    ["Step", "PMT_evacuation_SES_1_0.7_1", "TPB_evacuation_SES_1_0.7_1", "SCT_evacuation_SES_1_0.7_1",	"CRT_evacuation_SES_1_0.7_1"],
    ["Step", "PMT_evacuation_SES_2_0_0.3", "TPB_evacuation_SES_2_0_0.3", "SCT_evacuation_SES_2_0_0.3",	"CRT_evacuation_SES_2_0_0.3"],
    ["Step", "PMT_evacuation_SES_2_0.7_1", "TPB_evacuation_SES_2_0.7_1", "SCT_evacuation_SES_2_0.7_1",	"CRT_evacuation_SES_2_0.7_1"],
    ["Step", "PMT_duringflood_coping_action_implemented_SES_1_0_0.3", "TPB_duringflood_coping_action_implemented_SES_1_0_0.3", "SCT_duringflood_coping_action_implemented_SES_1_0_0.3",	"CRT_duringflood_coping_action_implemented_SES_1_0_0.3"],
    ["Step", "PMT_duringflood_coping_action_implemented_SES_1_0.7_1", "TPB_duringflood_coping_action_implemented_SES_1_0.7_1", "SCT_duringflood_coping_action_implemented_SES_1_0.7_1",	"CRT_duringflood_coping_action_implemented_SES_1_0.7_1"],
    ["Step", "PMT_duringflood_coping_action_implemented_SES_2_0_0.3", "TPB_duringflood_coping_action_implemented_SES_2_0_0.3", "SCT_duringflood_coping_action_implemented_SES_2_0_0.3",	"CRT_duringflood_coping_action_implemented_SES_2_0_0.3"],
    ["Step", "PMT_duringflood_coping_action_implemented_SES_2_0.7_1", "TPB_duringflood_coping_action_implemented_SES_2_0.7_1", "SCT_duringflood_coping_action_implemented_SES_2_0.7_1",	"CRT_duringflood_coping_action_implemented_SES_2_0.7_1"],
    ["Step", "PMT_postflood_adaptation_measures_planned_SES_1_0_0.3", "TPB_postflood_adaptation_measures_planned_SES_1_0_0.3", "SCT_postflood_adaptation_measures_planned_SES_1_0_0.3",	"CRT_postflood_adaptation_measures_planned_SES_1_0_0.3"],
    ["Step", "PMT_postflood_adaptation_measures_planned_SES_1_0.7_1", "TPB_postflood_adaptation_measures_planned_SES_1_0.7_1", "SCT_postflood_adaptation_measures_planned_SES_1_0.7_1",	"CRT_postflood_adaptation_measures_planned_SES_1_0.7_1"],
    ["Step", "PMT_postflood_adaptation_measures_planned_SES_2_0_0.3", "TPB_postflood_adaptation_measures_planned_SES_2_0_0.3", "SCT_postflood_adaptation_measures_planned_SES_2_0_0.3",	"CRT_postflood_adaptation_measures_planned_SES_2_0_0.3"],
    ["Step", "PMT_postflood_adaptation_measures_planned_SES_2_0.7_1", "TPB_postflood_adaptation_measures_planned_SES_2_0.7_1", "SCT_postflood_adaptation_measures_planned_SES_2_0.7_1",	"CRT_postflood_adaptation_measures_planned_SES_2_0.7_1"]
]

x_label = "Days"
y_label = "Count"
legend_labels = ["Evacuated", "Preflood Measures", "Coping Actions", "Adaptation Measures"]
line_thickness = 2
x_range = (0, 30)
y_range = (0, 1)
x_interval = 7
y_interval = 0.2
axis_label_size = 15
colors = ['b', 'g', 'r', 'c']  # Custom colors
plt_std = True



# To plot the average with standard deviation fill
plot_graphs(file_path, file_type, group_num, columns_to_include, 
            x_label, y_label, legend_labels, 
            line_thickness, x_range, y_range, 
            x_interval, y_interval, axis_label_size, colors, 
            plot_average=True, include_std=plt_std)


