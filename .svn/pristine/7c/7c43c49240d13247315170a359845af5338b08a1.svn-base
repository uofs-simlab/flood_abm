# -*- coding: utf-8 -*-
"""
Created on Wed May 22 14:09:25 2024
@author: oaadd
"""

from mesa import DataCollector
import flood_agents as FA

#-------------- Data Collection based on SES index --------------------

def data_collection(model):
    
    model.datacollector = DataCollector(
        model_reporters={
            
            "PMT_preflood_non_evacuation_measure_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "PMT_preflood_non_evacuation_measure_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "TPB_preflood_non_evacuation_measure_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "TPB_preflood_non_evacuation_measure_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "SCT_preflood_non_evacuation_measure_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "SCT_preflood_non_evacuation_measure_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "CRT_preflood_non_evacuation_measure_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "CRT_preflood_non_evacuation_measure_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            
            "PMT_evacuation_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_evacuation"  and  0 <= agent.SES_index_1 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "PMT_evacuation_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_evacuation"  and  0.7 <= agent.SES_index_1 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "TPB_evacuation_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_evacuation"  and  0 <= agent.SES_index_1 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "TPB_evacuation_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_evacuation"  and  0.7 <= agent.SES_index_1 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "SCT_evacuation_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_evacuation"  and  0 <= agent.SES_index_1 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "SCT_evacuation_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_evacuation"  and  0.7 <= agent.SES_index_1 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "CRT_evacuation_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_evacuation"  and  0 <= agent.SES_index_1 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "CRT_evacuation_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_evacuation"  and  0.7 <= agent.SES_index_1 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            
            "PMT_duringflood_coping_action_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "PMT_duringflood_coping_action_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "TPB_duringflood_coping_action_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "TPB_duringflood_coping_action_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "SCT_duringflood_coping_action_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "SCT_duringflood_coping_action_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "CRT_duringflood_coping_action_implemented_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_1 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "CRT_duringflood_coping_action_implemented_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_1 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            
            "PMT_postflood_adaptation_measures_planned_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_1 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "PMT_postflood_adaptation_measures_planned_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_1 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "TPB_postflood_adaptation_measures_planned_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_1 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "TPB_postflood_adaptation_measures_planned_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_1 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "SCT_postflood_adaptation_measures_planned_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_1 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "SCT_postflood_adaptation_measures_planned_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_1 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "CRT_postflood_adaptation_measures_planned_SES_1_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_1 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "CRT_postflood_adaptation_measures_planned_SES_1_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_1 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,

            "PMT_preflood_non_evacuation_measure_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "PMT_preflood_non_evacuation_measure_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "TPB_preflood_non_evacuation_measure_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "TPB_preflood_non_evacuation_measure_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "SCT_preflood_non_evacuation_measure_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "SCT_preflood_non_evacuation_measure_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "CRT_preflood_non_evacuation_measure_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_preflood_non_evacuation_measure_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            "CRT_preflood_non_evacuation_measure_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_preflood_non_evacuation_measure_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_preflood_non_evacuation_measure_implemented(model) if compute_preflood_non_evacuation_measure_implemented(model) > 0 else 0,
            
            "PMT_evacuation_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_evacuation"  and  0 <= agent.SES_index_2 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "PMT_evacuation_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_evacuation"  and  0.7 <= agent.SES_index_2 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "TPB_evacuation_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_evacuation"  and  0 <= agent.SES_index_2 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "TPB_evacuation_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_evacuation"  and  0.7 <= agent.SES_index_2 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "SCT_evacuation_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_evacuation"  and  0 <= agent.SES_index_2 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "SCT_evacuation_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_evacuation"  and  0.7 <= agent.SES_index_2 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "CRT_evacuation_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_evacuation"  and  0 <= agent.SES_index_2 <= 0.3) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            "CRT_evacuation_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_evacuation"  and  0.7 <= agent.SES_index_2 <= 1) / compute_evacuated(model) if compute_evacuated(model) > 0 else 0,
            
            "PMT_duringflood_coping_action_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "PMT_duringflood_coping_action_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "TPB_duringflood_coping_action_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "TPB_duringflood_coping_action_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "SCT_duringflood_coping_action_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "SCT_duringflood_coping_action_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "CRT_duringflood_coping_action_implemented_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_duringflood_coping_action_implemented"  and  0 <= agent.SES_index_2 <= 0.3) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            "CRT_duringflood_coping_action_implemented_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_duringflood_coping_action_implemented"  and  0.7 <= agent.SES_index_2 <= 1) / compute_duringflood_coping_action_implemented(model) if compute_duringflood_coping_action_implemented(model) > 0 else 0,
            
            "PMT_postflood_adaptation_measures_planned_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_2 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "PMT_postflood_adaptation_measures_planned_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "PMT_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_2 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "TPB_postflood_adaptation_measures_planned_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_2 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "TPB_postflood_adaptation_measures_planned_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "TPB_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_2 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "SCT_postflood_adaptation_measures_planned_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_2 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "SCT_postflood_adaptation_measures_planned_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "SCT_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_2 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "CRT_postflood_adaptation_measures_planned_SES_2_0_0.3": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_postflood_adaptation_measures_planned"  and  0 <= agent.SES_index_2 <= 0.3) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,
            "CRT_postflood_adaptation_measures_planned_SES_2_0.7_1": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and 
                agent.decision_now == "CRT_postflood_adaptation_measures_planned"  and  0.7 <= agent.SES_index_2 <= 1) / compute_postflood_adaptation_measures_planned(model) if compute_postflood_adaptation_measures_planned(model) > 0 else 0,

            "Stranded": lambda model:compute_stranded(model) / model.num_persons,
            "Injured": lambda model: compute_injured(model) / model.num_persons,
            "Sheltered": lambda model: compute_sheltered(model) / model.num_persons,
            "Hospitalized": lambda model: compute_hospitalized(model) / model.num_persons,
            "Death": lambda model: compute_death(model) / model.num_persons,
            "Evacuated": lambda model: compute_evacuated(model) / model.num_persons,
            
            "Preflood_Non_Evacuation_Measure_Implemented": lambda model: compute_preflood_non_evacuation_measure_implemented(model) / model.num_persons,
            "Duringflood_Coping_Action_Implemented": lambda model: compute_duringflood_coping_action_implemented(model) / model.num_persons,
            "Postflood_Adaptation_Measures_Planned": lambda model: compute_postflood_adaptation_measures_planned(model) / model.num_persons,
            
            "Houses_Flooded": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.House_Agent) and agent.flooded) / model.num_houses,
            "Businesses_Flooded": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Business_Agent) and agent.flooded) / model.num_businesses,
            "Schools_Flooded": lambda model: sum(1 for agent in model.schedule.agents if isinstance(agent, FA.School_Agent) and agent.flooded) / model.num_schools,
            
            "Wealth_People": lambda model: sum(agent.income for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and not agent.evacuated) / model.persons_gdp - 1,
            "Wealth_Businesses": lambda model: sum(agent.wealth for agent in model.schedule.agents if isinstance(agent, FA.Business_Agent)) / model.business_gdp - 1,
            "Wealth_Shelter": lambda model: sum(agent.wealth for agent in model.schedule.agents if isinstance(agent, FA.Shelter_Agent)) / model.shelter_gdp - 1,
            "Wealth_Healthcare": lambda model: sum(agent.wealth for agent in model.schedule.agents if isinstance(agent, FA.Healthcare_Agent)) / model.healthcare_gdp - 1,
            "Wealth_Government": lambda model: sum(agent.wealth for agent in model.schedule.agents if isinstance(agent, FA.Government_Agent)) / model.government_gdp - 1,
            
            **{f"Evacuated_{category}": lambda model, cat=category: evacuated_agents_by_category(model, cat) for category in ['SES_index_1_0_0.3', 'SES_index_1_0.7_1'] + ['SES_index_2_0_0.3', 'SES_index_2_0.7_1']},
            **{f"Stranded_{category}": lambda model, cat=category: stranded_agents_by_category(model, cat) for category in ['SES_index_1_0_0.3', 'SES_index_1_0.7_1'] + ['SES_index_2_0_0.3', 'SES_index_2_0.7_1']},            
            **{f"Sheltered_{category}": lambda model, cat=category: sheltered_agents_by_category(model, cat) for category in ['SES_index_1_0_0.3', 'SES_index_1_0.7_1'] + ['SES_index_2_0_0.3', 'SES_index_2_0.7_1']},
            **{f"Dead_{category}": lambda model, cat=category: dead_agents_by_category(model, cat) for category in ['SES_index_1_0_0.3', 'SES_index_1_0.7_1'] + ['SES_index_2_0_0.3', 'SES_index_2_0.7_1']},
            **{f"Hospitalized_{category}": lambda model, cat=category: hospitalized_agents_by_category(model, cat) for category in ['SES_index_1_0_0.3', 'SES_index_1_0.7_1'] + ['SES_index_2_0_0.3', 'SES_index_2_0.7_1']},
            **{f"Injured_{category}": lambda model, cat=category: injured_agents_by_category(model, cat) for category in ['SES_index_1_0_0.3', 'SES_index_1_0.7_1'] + ['SES_index_2_0_0.3', 'SES_index_2_0.7_1']}
            }
        )

def count_agents_by_category(model, category, condition):
    def count_agents(condition):
        return sum(1 for agent in model.schedule.agents if condition(agent))

    if category.startswith('SES_index_1'):
        indx1_ranges = {
            'SES_index_1_0_0.3': (0, 0.3), 
            'SES_index_1_0.7_1': (0.7, 1)
        }
        min_indx1, max_indx1 = indx1_ranges.get(category, (0, 0))
        total_agents_in_category = count_agents(lambda agent: isinstance(agent, FA.Person_Agent) and min_indx1 < agent.SES_index_1 <= max_indx1)
        agents_in_category = count_agents(lambda agent: condition(agent) and min_indx1 < agent.SES_index_1 <= max_indx1)
        return agents_in_category / total_agents_in_category if total_agents_in_category != 0 else 0

    elif category.startswith('SES_index_2'):
        indx2_ranges = {
            'SES_index_2_0_0.3': (0, 0.3), 
            'SES_index_2_0.7_1': (0.7, 1)
        }
        min_indx2, max_indx2 = indx2_ranges.get(category, (0, 0))
        total_agents_in_category = count_agents(lambda agent: isinstance(agent, FA.Person_Agent) and min_indx2 < agent.SES_index_2 <= max_indx2)
        agents_in_category = count_agents(lambda agent: condition(agent) and min_indx2 < agent.SES_index_2 <= max_indx2)
        return agents_in_category / total_agents_in_category if total_agents_in_category != 0 else 0

def evacuated_agents_by_category(model, category):
    return count_agents_by_category(model, category, lambda agent: isinstance(agent, FA.Person_Agent) and agent.evacuated)

def stranded_agents_by_category(model, category):
    return count_agents_by_category(model, category, lambda agent: isinstance(agent, FA.Person_Agent) and agent.stranded)

def dead_agents_by_category(model, category):
    return count_agents_by_category(model, category, lambda agent: isinstance(agent, FA.Person_Agent) and not agent.alive)

def sheltered_agents_by_category(model, category):
    return count_agents_by_category(model, category, lambda agent: isinstance(agent, FA.Person_Agent) and agent in 
                                    [sheltered_agent for ss_agent in model.schedule.agents if isinstance(ss_agent, FA.Shelter_Agent) 
                                              for sheltered_agent in ss_agent.sheltered_agents])

def hospitalized_agents_by_category(model, category):
    return count_agents_by_category(model, category, lambda agent: isinstance(agent, FA.Person_Agent) and agent in 
                                    [hospitalized_agent for hc_agent in model.schedule.agents if isinstance(hc_agent, FA.Healthcare_Agent) 
                                              for hospitalized_agent in hc_agent.hospitalized_agents])

def injured_agents_by_category(model, category):
    return count_agents_by_category(model, category, lambda agent: isinstance(agent, FA.Person_Agent) and agent.injured)

def compute_preflood_non_evacuation_measure_implemented(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent.preflood_non_evacuation_measure_implemented)

def compute_duringflood_coping_action_implemented(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent.duringflood_coping_action_implemented)

def compute_postflood_adaptation_measures_planned(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent.postflood_adaptation_measures_planned)

def compute_evacuated(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent.evacuated)

def compute_hospitalized(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent in 
               [hospitalized_agent for hc_agent in model.schedule.agents if isinstance(hc_agent, FA.Healthcare_Agent) for hospitalized_agent in hc_agent.hospitalized_agents])

def compute_sheltered(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent in 
               [sheltered_agent for ss_agent in model.schedule.agents if isinstance(ss_agent, FA.Shelter_Agent) for sheltered_agent in ss_agent.sheltered_agents])

def compute_stranded(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent.stranded)

def compute_injured(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and agent.injured)

def compute_death(model):
    return sum(1 for agent in model.schedule.agents if isinstance(agent, FA.Person_Agent) and not agent.alive)
